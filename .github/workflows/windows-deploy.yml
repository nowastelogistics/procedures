name: Windows deploy build

on:
  workflow_call:
    inputs:
      project_name:
        required: true
        type: string
      project_file_path:
        required: true
        type: string
      project_test_file_path:
        required: false
        type: string
      octo_auto_release_dev:
        required: false
        type: boolean
        default: false
      octo_auto_release_prod:
        required: false
        type: boolean
        default: false
    secrets:
      nuget_github_server_url:
        required: true
      nuget_github_server_username:
        required: true
      nuget_github_server_password:
        required: true
      octopus_server_url:
        required: true
      octopus_server_apikey:
        required: true

jobs:
  build:
    runs-on: self-hosted
    steps:
    - name: Checkout source
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v3.0.0
      with:
        versionSpec: '5.x'

    - name: Determine Version
      uses: gittools/actions/gitversion/execute@v3.0.0
      with:
        useConfigFile: true
        configFilePath: GitVersion.yml

    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.x'

    - name: Install Octopus CLI
      uses: OctopusDeploy/install-octopus-cli-action@v3
      with:
        version: latest

    - name: Prepare NuGet sources
      run: |
        $nugetSources = dotnet nuget list source | Out-String; if(!($nugetSources -like "*github*")) { dotnet nuget add source --username ${{ secrets.nuget_github_server_username }} --password ${{ secrets.nuget_github_server_password }} --store-password-in-clear-text --name github ${{ secrets.nuget_github_server_url }} }

    - name: Run tests
      id: test
      run: |
        if ($env:INPUTS_PROJECT_TEST_FILE_PATH -and $env:INPUTS_PROJECT_TEST_FILE_PATH -ne "") {
            "tests-exists=true" | Out-File -Append -FilePath $env:GITHUB_OUTPUT
            dotnet test $env:INPUTS_PROJECT_TEST_FILE_PATH --results-directory ./TestResults --logger "trx;LogFileName=test-results.trx"
        } else {
            "exists=false" | Out-File -Append -FilePath $env:GITHUB_OUTPUT
        }


    - name: Upload test results
      if: (success() || failure()) && steps.test.outputs.tests-exists == 'true'
      uses: dorny/test-reporter@v1
      with:
        name: Tests
        working-directory: ${{ github.workspace }}/TestResults
        path: '*.trx'
        reporter: dotnet-trx
        max-annotations: '50'
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Build & Pack
      run: |
        dotnet publish $env:INPUTS_PROJECT_FILE_PATH -p:Version=$env:GITVERSION_NUGETVERSIONV2 --configuration Release --output build --arch x64

    - name: Determine Octopus release branch
      if: startsWith(github.ref, 'refs/tags/') || startsWith(github.ref, 'refs/heads/release') || github.ref == 'refs/heads/develop'
      id: octopus-channel
      run: |
          "autorelease=false" | Out-File -Append -FilePath $env:GITHUB_OUTPUT

          if ($env:GITHUB_REF -like 'refs/tags/*') {
              "channel=Production" | Out-File -Append -FilePath $env:GITHUB_OUTPUT
              "notes=https://github.com/$env:GITHUB_REPOSITORY/releases/tag/$env:GITHUB_REF_NAME" | Out-File -Append -FilePath $env:GITHUB_OUTPUT

              if ($env:INPUTS_OCTO_AUTO_RELEASE_PROD -eq "true") {
                  "autorelease=true" | Out-File -Append -FilePath $env:GITHUB_OUTPUT
              }
          } else {
              "channel=Development" | Out-File -Append -FilePath $env:GITHUB_OUTPUT
              "notes=https://github.com/$env:GITHUB_REPOSITORY/commit/$env:GITHUB_SHA" | Out-File -Append -FilePath $env:GITHUB_OUTPUT

              if ($env:INPUTS_OCTO_AUTO_RELEASE_DEV -eq "true" -and $env:GITHUB_REF_NAME -like "refs/heads/release*") {
                  "autorelease=true" | Out-File -Append -FilePath $env:GITHUB_OUTPUT
              }
          }


    - name: Octopus Create release
      if: startsWith(github.ref, 'refs/tags/') || startsWith(github.ref, 'refs/heads/release') || github.ref == 'refs/heads/develop'
      run: |
        octopus login --server "$env:OCTOPUS_SERVER_URL" --api-key "$env:OCTOPUS_SERVER_APIKEY"
        octopus package zip create --id "$env:INPUTS_DOCKER_IMAGE_NAME" --version "$env:GITVERSION_NUGETVERSIONV2" --base-path "nomad" --include "$env:INPUTS_DOCKER_IMAGE_NAME.*"
        octopus package upload --space "Spaces-1" --package "$env:INPUTS_DOCKER_IMAGE_NAME.$env:GITVERSION_NUGETVERSIONV2.zip"
        octopus release create --space "Spaces-1" --project "$env:INPUTS_DOCKER_IMAGE_NAME" --version "$env:GITVERSION_NUGETVERSIONV2" --channel "$env:STEPS_OCTOPUS_CHANNEL_OUTPUTS_CHANNEL" --releaseNotes "$env:STEPS_OCTOPUS_CHANNEL_OUTPUTS_NOTES" --package "$env:INPUTS_DOCKER_IMAGE_NAME`:$env:GITVERSION_NUGETVERSIONV2"

        if ($env:STEPS_OCTOPUS_CHANNEL_OUTPUTS_AUTORELEASE -eq "true") {
            octopus deploy-release --project "$env:INPUTS_DOCKER_IMAGE_NAME" --version "$env:GITVERSION_NUGETVERSIONV2" --tenant "*" --deployTo "$env:STEPS_OCTOPUS_CHANNEL_OUTPUTS_CHANNEL"
        }

        "### Octopus release" | Out-File -Append -FilePath $env:GITHUB_STEP_SUMMARY
        "Pushed new release of docker container **$env:INPUTS_DOCKER_IMAGE_NAME** version **$env:GITVERSION_NUGETVERSIONV2** to Octopus" | Out-File -Append -FilePath $env:GITHUB_STEP_SUMMARY
