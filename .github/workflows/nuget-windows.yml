name: NuGet build

on:
  workflow_call:
    inputs:
      project_file_path:
        required: true
        type: string
      project_test_file_path:
        required: false
        type: string
      project_nuget_name:
        required: true
        type: string
    secrets:
      nuget_github_server_url:
        required: true
      nuget_github_server_username:
        required: true
      nuget_github_server_password:
        required: true
      nuget_azure_server_url:
        required: true
      nuget_azure_server_username:
        required: true
      nuget_azure_server_password:
        required: true

jobs:
  build:
    runs-on: windows-2022
    steps:
    - name: Checkout source
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.11
      with:
        versionSpec: '5.x'

    - name: Determine Version
      uses: gittools/actions/gitversion/execute@v0.9.11
      with:
        useConfigFile: true
        configFilePath: GitVersion.yml

    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v1.9.0
      with:
        dotnet-version: '6.0.x'

    - name: Prepare NuGet sources
      run: |
        dotnet nuget add source --username ${{ secrets.nuget_github_server_username }} --password ${{ secrets.nuget_github_server_password }} --store-password-in-clear-text --name github ${{ secrets.nuget_github_server_url }}
        dotnet nuget add source --username ${{ secrets.nuget_azure_server_username }} --password ${{ secrets.nuget_azure_server_password }} --store-password-in-clear-text --name azure ${{ secrets.nuget_azure_server_url }}

    - name: Run tests
      id: test
      shell: bash
      run: |
        if [ -n "${{ inputs.project_test_file_path }}" ]; then
          echo "::set-output name=tests-exists::true"
          dotnet test ${{ inputs.project_test_file_path }} --results-directory ./TestResults --logger "trx;LogFileName=test-results.trx"
        else
          echo "::set-output name=exists::false"
        fi

    - name: Upload test results
      if: (success() || failure()) && steps.test.outputs.tests-exists == 'true'
      uses: dorny/test-reporter@v1
      with:
        name: Tests
        working-directory: ${{ github.workspace }}/TestResults
        path: '*.trx'
        reporter: dotnet-trx
        max-annotations: '50'
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Code Coverage Summary Report
      uses: irongut/CodeCoverageSummary@v1.0.2
      id: codecoveragereport
      if: hashFiles('TestResults/*.xml') != ''
      with:
        filename: TestResults/coverage.cobertura.xml
        badge: true
        format: 'markdown'
        output: 'both'

    - name: Get Pull Request information
      uses: 8BitJonny/gh-get-current-pr@2.0.0
      if: steps.codecoveragereport.outcome == 'success'
      id: PR
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        sha: ${{ github.event.pull_request.head.sha }}
        filterOutClosed: true

    - name: Add Coverage PR Comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: steps.PR.outputs.number != '' && steps.PR.outcome == 'success'
      with:
        number: ${{ steps.PR.outputs.number }}
        recreate: true
        path: code-coverage-results.md

    - name: Build & Pack NuGet
      shell: bash
      run: |
        dotnet build ${{ inputs.project_file_path }} -p:Version=${{ env.GitVersion_NuGetVersionV2 }} --configuration Release
        dotnet pack ${{ inputs.project_file_path }} -p:Version=${{ env.GitVersion_NuGetVersionV2 }} --configuration Release --output nupkgs

    - name: Create NuGet release
      if: startsWith(github.ref, 'refs/tags/') || startsWith(github.ref, 'refs/heads/release') || github.ref == 'refs/heads/develop'
      shell: bash
      run: |
        dotnet nuget push nupkgs/${{ inputs.project_nuget_name }}.${{ env.GitVersion_NuGetVersionV2 }}.nupkg --api-key ${{ secrets.nuget_github_server_password }} --source github --skip-duplicate
        dotnet nuget push nupkgs/${{ inputs.project_nuget_name }}.${{ env.GITVERSION_NUGETVERSIONV2 }}.nupkg --api-key ${{ secrets.nuget_azure_server_password }} --source azure --skip-duplicate

        echo '### NuGet package' >> $GITHUB_STEP_SUMMARY
        echo 'Pushed new release of package **${{ inputs.project_nuget_name }}** version **${{ env.GITVERSION_NUGETVERSIONV2 }}** to feed' >> $GITHUB_STEP_SUMMARY
